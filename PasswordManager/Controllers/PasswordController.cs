using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using PasswordManager.Dto.Admin;
using PasswordManager.Dto.Credentials;
using PasswordManager.Interfaces.Admin;
using PasswordManager.Interfaces.Credentials;

namespace PasswordManager.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class PasswordController : ControllerBase
    {
        private readonly ICredentialService _credentialService;
        private readonly IPasswordGenerator _passwordGenerator;

        public PasswordController(ICredentialService credentialService, IPasswordGenerator passwordGenerator)
        {
            _credentialService = credentialService;
            _passwordGenerator = passwordGenerator;
        }

        [HttpPost("addCredential")]
        public async Task<IActionResult> AddCredential([FromBody] AddCredDto addCred, [FromHeader(Name = "Authorization")] string authToken)
        {
            var result = await _credentialService.AddCredential(addCred, authToken);
            return StatusCode(result.StatusCode, result);
        }

        [HttpPut("updateCredential/{credId}")]
        public async Task<IActionResult> UpdateCredential(Guid credId, [FromBody] EditCredDto editCredDto, [FromHeader(Name = "Authorization")] string authToken)
        {
            var result = await _credentialService.UpdateCredential(credId, editCredDto, authToken);
            return StatusCode(result.StatusCode, result);
        }

        [HttpDelete("deleteCredential/{credId}")]
        public async Task<IActionResult> DeleteCredential(Guid credId, [FromHeader(Name = "Authorization")] string authToken)
        {
            var result = await _credentialService.DeleteCredential(credId, authToken);
            return StatusCode(result.StatusCode, result);
        }

        [HttpGet("getCredentialDetail/{credId}")]
        public async Task<IActionResult> GetCredentialDetail(Guid credId, [FromHeader(Name = "Authorization")] string authToken)
        {
            var result = await _credentialService.GetCredentialDetail(credId, authToken);
            return StatusCode(result.StatusCode, result);
        }

        [HttpGet("getAllCredentials")]
        public async Task<IActionResult> GetAllCredentials([FromHeader(Name = "Authorization")] string authToken)
        {
            var result = await _credentialService.GeAllCredential(authToken);
            return StatusCode(result.StatusCode, result);
        }

        [HttpGet("autoGeneratedPassword")]
        public async Task<IActionResult> GetAutoGeneratedPassowrd([FromHeader(Name = "Authorization")] string authToken, PasswordGeneratorDto passwordGeneratorDto)
        {
            var result = await _passwordGenerator.GenerateAndStorePassword(authToken, passwordGeneratorDto);
            return StatusCode(result.StatusCode, result);
        }

    }
}
